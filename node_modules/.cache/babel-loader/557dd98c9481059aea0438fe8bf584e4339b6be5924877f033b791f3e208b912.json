{"ast":null,"code":"'use strict';\n\nconst BaseConnection = require('./connection.js');\nclass BasePoolConnection extends BaseConnection {\n  constructor(pool, options) {\n    super(options);\n    this._pool = pool;\n    // The last active time of this connection\n    this.lastActiveTime = Date.now();\n    // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n    this.once('end', () => {\n      this._removeFromPool();\n    });\n    this.once('error', () => {\n      this._removeFromPool();\n    });\n  }\n  release() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    // update last active time\n    this.lastActiveTime = Date.now();\n    this._pool.releaseConnection(this);\n  }\n  end() {\n    const err = new Error('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n    this.emit('warn', err);\n    console.warn(err.message);\n    this.release();\n  }\n  destroy() {\n    this._removeFromPool();\n    super.destroy();\n  }\n  _removeFromPool() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    const pool = this._pool;\n    this._pool = null;\n    pool._removeConnection(this);\n  }\n}\nBasePoolConnection.statementKey = BaseConnection.statementKey;\nmodule.exports = BasePoolConnection;\n\n// TODO: Remove this when we are removing PoolConnection#end\nBasePoolConnection.prototype._realEnd = BaseConnection.prototype.end;","map":{"version":3,"names":["BaseConnection","require","BasePoolConnection","constructor","pool","options","_pool","lastActiveTime","Date","now","once","_removeFromPool","release","_closed","releaseConnection","end","err","Error","emit","console","warn","message","destroy","_removeConnection","statementKey","module","exports","prototype","_realEnd"],"sources":["/Users/csuftitan/Desktop/Cloud Project/beach-info/node_modules/mysql2/lib/base/pool_connection.js"],"sourcesContent":["'use strict';\n\nconst BaseConnection = require('./connection.js');\n\nclass BasePoolConnection extends BaseConnection {\n  constructor(pool, options) {\n    super(options);\n    this._pool = pool;\n    // The last active time of this connection\n    this.lastActiveTime = Date.now();\n    // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n    this.once('end', () => {\n      this._removeFromPool();\n    });\n    this.once('error', () => {\n      this._removeFromPool();\n    });\n  }\n\n  release() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    // update last active time\n    this.lastActiveTime = Date.now();\n    this._pool.releaseConnection(this);\n  }\n\n  end() {\n    const err = new Error(\n      'Calling conn.end() to release a pooled connection is ' +\n        'deprecated. In next version calling conn.end() will be ' +\n        'restored to default conn.end() behavior. Use ' +\n        'conn.release() instead.',\n    );\n    this.emit('warn', err);\n    console.warn(err.message);\n    this.release();\n  }\n\n  destroy() {\n    this._removeFromPool();\n    super.destroy();\n  }\n\n  _removeFromPool() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    const pool = this._pool;\n    this._pool = null;\n    pool._removeConnection(this);\n  }\n}\n\nBasePoolConnection.statementKey = BaseConnection.statementKey;\nmodule.exports = BasePoolConnection;\n\n// TODO: Remove this when we are removing PoolConnection#end\nBasePoolConnection.prototype._realEnd = BaseConnection.prototype.end;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAEjD,MAAMC,kBAAkB,SAASF,cAAc,CAAC;EAC9CG,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;IACzB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,KAAK,GAAGF,IAAI;IACjB;IACA,IAAI,CAACG,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAChC;IACA;IACA;IACA;IACA,IAAI,CAACC,IAAI,CAAC,KAAK,EAAE,MAAM;MACrB,IAAI,CAACC,eAAe,CAAC,CAAC;IACxB,CAAC,CAAC;IACF,IAAI,CAACD,IAAI,CAAC,OAAO,EAAE,MAAM;MACvB,IAAI,CAACC,eAAe,CAAC,CAAC;IACxB,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAACN,KAAK,IAAI,IAAI,CAACA,KAAK,CAACO,OAAO,EAAE;MACrC;IACF;IACA;IACA,IAAI,CAACN,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAChC,IAAI,CAACH,KAAK,CAACQ,iBAAiB,CAAC,IAAI,CAAC;EACpC;EAEAC,GAAGA,CAAA,EAAG;IACJ,MAAMC,GAAG,GAAG,IAAIC,KAAK,CACnB,uDAAuD,GACrD,yDAAyD,GACzD,+CAA+C,GAC/C,yBACJ,CAAC;IACD,IAAI,CAACC,IAAI,CAAC,MAAM,EAAEF,GAAG,CAAC;IACtBG,OAAO,CAACC,IAAI,CAACJ,GAAG,CAACK,OAAO,CAAC;IACzB,IAAI,CAACT,OAAO,CAAC,CAAC;EAChB;EAEAU,OAAOA,CAAA,EAAG;IACR,IAAI,CAACX,eAAe,CAAC,CAAC;IACtB,KAAK,CAACW,OAAO,CAAC,CAAC;EACjB;EAEAX,eAAeA,CAAA,EAAG;IAChB,IAAI,CAAC,IAAI,CAACL,KAAK,IAAI,IAAI,CAACA,KAAK,CAACO,OAAO,EAAE;MACrC;IACF;IACA,MAAMT,IAAI,GAAG,IAAI,CAACE,KAAK;IACvB,IAAI,CAACA,KAAK,GAAG,IAAI;IACjBF,IAAI,CAACmB,iBAAiB,CAAC,IAAI,CAAC;EAC9B;AACF;AAEArB,kBAAkB,CAACsB,YAAY,GAAGxB,cAAc,CAACwB,YAAY;AAC7DC,MAAM,CAACC,OAAO,GAAGxB,kBAAkB;;AAEnC;AACAA,kBAAkB,CAACyB,SAAS,CAACC,QAAQ,GAAG5B,cAAc,CAAC2B,SAAS,CAACZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}